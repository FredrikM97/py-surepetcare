name: Publish Python distribution to PyPI and TestPyPI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  check-merge-and-version:
    name: Check PR merge and version bump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get previous commit on main
        id: prev_commit
        run: |
          PREV_SHA=$(git rev-parse HEAD^1)
          echo "prev_sha=$PREV_SHA" >> $GITHUB_OUTPUT
      - name: Compare pyproject.toml version
        id: check_version
        run: |
          NEW_VER=$(grep '^version' pyproject.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
          git checkout ${{ steps.prev_commit.outputs.prev_sha }} -- pyproject.toml
          OLD_VER=$(grep '^version' pyproject.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
          if [ "$NEW_VER" != "$OLD_VER" ]; then
            echo "Version updated: $OLD_VER -> $NEW_VER"
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT
          else
            echo "No version change. Skipping publish."
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      deploy: ${{ steps.check_version.outputs.deploy }}
      new_version: ${{ steps.check_version.outputs.new_version }}

  build:
    name: Build distribution
    needs: check-merge-and-version
    if: needs.check-merge-and-version.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/py-surepetcare
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
    