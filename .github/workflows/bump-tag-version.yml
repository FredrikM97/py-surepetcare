name: Bump version tag

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'

jobs:
  tag-version:
    name: Tag version if pyproject.toml changed
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous commit on main
        id: prev_commit
        run: |
          PREV_SHA=$(git rev-parse HEAD^1)
          echo "prev_sha=$PREV_SHA" >> $GITHUB_OUTPUT
          
      - name: Compare pyproject.toml version
        id: check_version
        run: |
          NEW_VER=$(grep '^version' pyproject.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
          git checkout ${{ steps.prev_commit.outputs.prev_sha }} -- pyproject.toml
          OLD_VER=$(grep '^version' pyproject.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
          git checkout HEAD -- pyproject.toml
          if [ "$NEW_VER" != "$OLD_VER" ]; then
            echo "Version updated: $OLD_VER -> $NEW_VER"
            echo "tag=v$NEW_VER" >> $GITHUB_OUTPUT
            echo "should_tag=true" >> $GITHUB_OUTPUT
          else
            echo "No version change. Skipping tag."
            echo "should_tag=false" >> $GITHUB_OUTPUT
          fi
      - name: Check if tag already exists
        if: steps.check_version.outputs.should_tag == 'true'
        id: tag_exists
        run: |
          if git rev-parse ${{ steps.check_version.outputs.tag }} >/dev/null 2>&1; then
            echo "Tag already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create and push tag
        if: steps.check_version.outputs.should_tag == 'true' && steps.tag_exists.outputs.exists == 'false'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git tag -a ${{ steps.check_version.outputs.tag }} -m "${{ steps.check_version.outputs.tag }}"
          git push origin ${{ steps.check_version.outputs.tag }}